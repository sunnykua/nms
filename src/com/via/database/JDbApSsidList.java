package com.via.database;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.math.BigInteger;

public class JDbApSsidList {
    private JDatabase dbInst;
    private String tableName;
    private String tableNameInQuotes;
    private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    private final BigInteger maxInt32 = new BigInteger("4294967296");               // 2 ^ 32
    private final BigInteger maxInt64 = new BigInteger("18446744073709551616");     // 2 ^ 64
    private final String[] tableDefinition = {
    		"ID INT GENERATED BY DEFAULT AS IDENTITY, ",
    		"AC_PUBLIC_IP   VARCHAR(20) NOT NULL, ",
    		"AP_PUBLIC_IP   VARCHAR(20) NOT NULL, ",
    		"AP_NAME        VARCHAR(20) NOT NULL, ",
            "SCHD_TIME      TIMESTAMP NOT NULL, ",
            "REC_TIME       TIMESTAMP NOT NULL, ",
            "AP_SSID        VARCHAR(20), ",
            "AP_RADIO       VARCHAR(20), ",
            "OCT_TX_TOT     VARCHAR(20), ",
            "OCT_RX_TOT     VARCHAR(20) "
    };
    
    public JDbApSsidList(final JDatabase database, final String tableName) {
        this.dbInst = database;
        this.tableName = tableName;
        this.tableNameInQuotes = "\"" + tableName + "\"";
    }
    
    public boolean isTableExisted() {
        return dbInst.isTableExisted(tableName);
    }
    
    public boolean createTable() {
        String definition = "";
        for (String s : tableDefinition) definition += s;

        return dbInst.createTable(tableName, definition);
    }

    public boolean add(final String[] value) {
        return dbInst.insert(tableName, value);
    }
    
    public boolean add(final String[][] values) {
        return dbInst.insert(tableName, values);
    }
    
    public String[] getFirstByPort(final String ip, final String ssid) {
        String ipAddrExpression = "AP_PUBLIC_IP = '" + ip + "'";
        String ssidExpression = "AP_SSID = '" + ssid + "'";
        return dbInst.getFirst(tableName, "ID", new String[]{ ipAddrExpression, ssidExpression});
    }
    
    public String[] getLastByPort(final String ip, final String ssid) {
        String ipAddrExpression = "AP_PUBLIC_IP = '" + ip + "'";
        String ssidExpression = "AP_SSID = '" + ssid + "'";
        return dbInst.getLast(tableName, "ID", new String[]{ ipAddrExpression, ssidExpression});
    }
    
    public String[] getBoundaryTimeByPort(final String ip, final String ssid) {
        String[] firstRecord = getFirstByPort(ip, ssid);
        String[] lastRecord = getLastByPort(ip, ssid);
        
        if (firstRecord != null && lastRecord != null) {
        	//System.out.println("firstRecord"+Arrays.toString(firstRecord));
        	//System.out.println("firstRecord"+Arrays.toString(lastRecord));
            return new String[] { firstRecord[5], lastRecord[5] };      // NOTE: care about the index
        }
        
        return null;
    }
    
    public String[][] getHistoryApList(final String acIp) {
    	String selectedString = "AP_PUBLIC_IP";
    	String acIpAddrExpression = "AC_PUBLIC_IP = '" + acIp + "'";
        
    	String query = String.format("SELECT %s FROM %s WHERE %s GROUP BY %s",
                selectedString, tableNameInQuotes, acIpAddrExpression, selectedString);
        
        String[][] result = dbInst.getByQuery(query);
        
        return result;
    }
    
    public String[][] getHistoryApSsidList(final String acIp, final String apIp) {
    	String selectedString = "AP_SSID";
    	String acIpAddrExpression = "AC_PUBLIC_IP = '" + acIp + "'";
        String ipAddrExpression = "AP_PUBLIC_IP = '" + apIp + "'";
        
        String query = String.format("SELECT %s FROM %s WHERE %s AND %s GROUP BY %s",
                selectedString, tableNameInQuotes, acIpAddrExpression, ipAddrExpression, selectedString);
        
        String[][] result = dbInst.getByQuery(query);
        
        return result;
    }

    /**
     * Return a set of array that contents timing and data rate of Rx/Tx octets.
     * 
     */
    public String[][] getRxTxOctetRateHistory(final String acIp, final String ip, final String ssid, final String startTime, final String endTime) {
        String[] selectedColumns = { "SCHD_TIME", "AP_RADIO", "OCT_RX_TOT", "OCT_TX_TOT" };

        return getHistoryInRate(acIp, ip, ssid, startTime, endTime, selectedColumns);
    }
    
    private String[][] getHistoryInRate(
    		final String acIp,
            final String ip,
            final String ssid,
            final String startTime,
            final String endTime,
            final String[] selectedColumns) {
        
        Calendar calendar = Calendar.getInstance();
        String baseStartTime = "2000-01-01 00:00:00.000"; // use this time as the far past time
        String baseEndTime = sdf.format(calendar.getTime()); // use current time as the latest time
        String acIpAddrExpression = "AC_PUBLIC_IP = '" + acIp + "'";
        String ipAddrExpression = "AP_PUBLIC_IP = '" + ip + "'";
        String ssidExpression = "AP_SSID = '" + ssid + "'";
        String startTimeExpression = "REC_TIME >= '" + (startTime != null && !startTime.isEmpty() ? startTime : baseStartTime) + "'";
        String endTimeExpression = "REC_TIME <= '" + (endTime != null && !endTime.isEmpty() ? endTime : baseEndTime) + "'";
        
        double timeForRate = System.currentTimeMillis();
        String selectedString = "REC_TIME, " + selectedColumns[0];
        for (int i = 1; i < selectedColumns.length; i++) selectedString += ", " + selectedColumns[i];
        String query = String.format("SELECT %s FROM %s WHERE %s AND %s AND %s AND %s AND %s",
                selectedString, tableNameInQuotes, acIpAddrExpression, ipAddrExpression, ssidExpression, startTimeExpression, endTimeExpression);
        String[][] result = dbInst.getByQuery(query);
        //System.out.println(query);
        //System.out.println("Result data read from database:");
        //JTools.print(result, true);
        Map<String, String[]> data = new LinkedHashMap<String, String[]>();
        String[][] mapToArray = null;
        
        if (result != null && result.length > 0 ){
	        for (int i = 0; i < result.length; i++) {
	        	if(data.containsKey(result[i][1])){
	        		if(result[i][2].equals("2.4G")){
	        			data.get(result[i][1])[0] = result[i][3];
	        			data.get(result[i][1])[1] = result[i][4];
	        		}else if(result[i][2].equals("5G")){
	        			data.get(result[i][1])[2] = result[i][3];
	        			data.get(result[i][1])[3] = result[i][4];
	        		}
	        	}else{
	        		data.put(result[i][1], new String[]{"0","0","0","0"});
	        		if(result[i][2].equals("2.4G")){
	        			data.get(result[i][1])[0] = result[i][3];
	        			data.get(result[i][1])[1] = result[i][4];
	        		}else if(result[i][2].equals("5G")){
	        			data.get(result[i][1])[2] = result[i][3];
	        			data.get(result[i][1])[3] = result[i][4];
	        		}
	        	}
	        }
	        
	        /*for (Map.Entry<String, String[]> entry : data.entrySet()) {
	            System.out.println(entry.getKey() + ", " + Arrays.toString(entry.getValue()));
	        }*/
	        
	        mapToArray = new String[data.size()][5];
	        int s=0;
	        for (Map.Entry<String, String[]> entry : data.entrySet()) {
	        	mapToArray[s][0] = entry.getKey();
	        	mapToArray[s][1] = entry.getValue()[0];
	        	mapToArray[s][2] = entry.getValue()[1];
	        	mapToArray[s][3] = entry.getValue()[2];
	        	mapToArray[s][4] = entry.getValue()[3];
	            s++;
	        }
        }
        //JTools.print(mapToArray, true);
        
        String[][] output = null;
        String[][] finishOutput = null;
        float [][] tempOut = null;
        int lengthPerRecord = selectedColumns.length + 1;        // add one space to put rec_time in
        
        if (mapToArray != null && mapToArray.length > 0 && mapToArray[0].length == lengthPerRecord) {        // the length of first record should be correct
            output = new String[mapToArray.length][lengthPerRecord];
            finishOutput = new String[mapToArray.length][3];
            tempOut = new float[mapToArray.length][5];

            output[0][0] = mapToArray[0][0];                    // rec_time
            for (int j = 1; j < mapToArray[0].length; j++) output[0][j] = "0";      // fill 0 to all lines in first record

            for (int i = 1; i < mapToArray.length; i++) {
                output[i][0] = mapToArray[i][0];                // rec_time
                if (mapToArray[i].length != lengthPerRecord) {
                    for (int j = 1; j < lengthPerRecord; j++) output[i][j] = "0";      // skip this record if length is wrong
                    continue;
                }
                
                long diffTime = 0;;
                try {
                    diffTime = (sdf.parse(output[i][0]).getTime() - sdf.parse(output[i - 1][0]).getTime()) / 1000;    // the diff between current and previous
                }
                catch (ParseException e) {
                    System.out.println("getHistoryInRate calculate diffTime failed.");
                    for (int j = 1; j < lengthPerRecord; j++) output[i][j] = "0";
                    continue;
                }
                
                
                
                for (int j = 1; j < lengthPerRecord; j++) {
                    try {
                        BigInteger curr = new BigInteger(mapToArray[i][j]);
                        BigInteger prev = new BigInteger(mapToArray[i - 1][j]);
                        BigInteger diff = curr.subtract(prev);
                        if (curr.compareTo(prev) < 0) {                 // loop occurred
                            BigInteger max = maxInt32;
                            diff = max.subtract(prev).add(curr);
                        }
                        float rate = (diff.floatValue() * 8) / (float)diffTime / 1000;    // use 1 kbps = 1000 bps
                        if(diffTime > 3600){
                        	tempOut[i-1][j] = 0;
                        	output[i-1][j] = "0";
                        	tempOut[i][j] = 0;
                        	output[i][j] = "0";
                        }else{
	                        tempOut[i][j] = rate;
	                        output[i][j] = String.valueOf(rate);
                        }
                        
                        
                    }
                    catch (NumberFormatException e) {
                        System.out.println("getHistoryInRate parsing BigInteger failed.");
                        //tempOut[i][j] = 0;
                        output[i][j] = "0";
                    }
                }
                finishOutput[i][1] = String.valueOf(tempOut[i][1] + tempOut[i][3]);
                finishOutput[i][2] = String.valueOf(tempOut[i][2] + tempOut[i][4]);
                
            }
            for(int i = 0; i < finishOutput.length; i++){
            	finishOutput[i][0] = output[i][0];
            }
            
            for (int j = 1; j < finishOutput[0].length; j++) finishOutput[0][j] = output[0][j];
            

            //System.out.println("Output data that is parsing after read from database:");
            //JTools.print(finishOutput, true);
        }
        else {
            System.out.println("getHistoryInRate get data from db incorrect.");
        }
        System.out.println("getHistoryInRate uses " + (System.currentTimeMillis() - timeForRate) / 1000 + " sec.");
        
        return finishOutput;
    }

	public List<ArrayList<String[]>> getRxTxOctetTraffic(final String acIp, final String startTime, final String endTime) {
		double prevTime = System.currentTimeMillis();

		String[] selectedColumns = { "REC_TIME", "AP_PUBLIC_IP", "AP_NAME", "AP_RADIO", "AP_SSID", "OCT_RX_TOT", "OCT_TX_TOT" };
		String selectedString = selectedColumns[0];
		for (int i = 1; i < selectedColumns.length; i++)
			selectedString += ", " + selectedColumns[i];
		String acIpAddrExpression = "AC_PUBLIC_IP = '" + acIp + "'";

		Calendar calendar = Calendar.getInstance();
		String baseStartTime = "2000-01-01 00:00:00.000"; // use this time as the far past time
		String baseEndTime = sdf.format(calendar.getTime()); // use current time as the latest time
		String startTimeExpression = "REC_TIME >= '" + (startTime != null && !startTime.isEmpty() ? startTime : baseStartTime) + "'";
		String endTimeExpression = "REC_TIME <= '" + (endTime != null && !endTime.isEmpty() ? endTime : baseEndTime) + "'";

		String query = String.format("SELECT %s FROM %s WHERE %s AND AP_PUBLIC_IP <> '0.0.0.0' AND AP_PUBLIC_IP <> 'null' AND AP_SSID <> 'null' AND OCT_RX_TOT <> 'null' AND OCT_TX_TOT <> 'null' AND %s AND %s ORDER BY AP_PUBLIC_IP,AP_RADIO,AP_SSID,REC_TIME ASC", selectedString, tableNameInQuotes, acIpAddrExpression, startTimeExpression, endTimeExpression);
		//System.out.println(query);

		String[][] result = dbInst.getByQuery(query);

		String query2 = String.format("SELECT DISTINCT AP_SSID FROM %s WHERE %s AND AP_SSID <> 'null' AND %s AND %s ORDER BY AP_SSID ASC", tableNameInQuotes, acIpAddrExpression, startTimeExpression, endTimeExpression);

		String[][] result2 = dbInst.getByQuery(query2);

		List<ArrayList<String[]>> ApSsidTrafficList = new ArrayList<ArrayList<String[]>>();

		ArrayList<String[]> ApSsidTraffic = new ArrayList<String[]>();

		ArrayList<String[]> SsidTraffic = new ArrayList<String[]>();

		if (result != null) {
			String ip_tmp = "";

			ArrayList<String[]> ipfilter_array = new ArrayList<String[]>();

			for (int i = 0; i < result.length; i++) {
				//System.out.println(result[i][0] + ", " + result[i][1] + ", " + result[i][2] + ", " + result[i][3] + ", " + result[i][4] + ", " + result[i][5] + ", " + result[i][6]);

				if (!result[i][1].equals(ip_tmp)) {
					if (ipfilter_array.size() > 0) {
						String radio_tmp = "";
						String ssid_tmp = "";

						ArrayList<String[]> ssidfilter_array = new ArrayList<String[]>();

						for (int j = 0; j < ipfilter_array.size(); j++) {
							if (!(ipfilter_array.get(j)[3].equals(radio_tmp) && ipfilter_array.get(j)[4].equals(ssid_tmp))) {
								if (ssidfilter_array.size() > 0) {
									ApSsidTraffic.add(getTrafficSUM(ssidfilter_array));
								}

								radio_tmp = ipfilter_array.get(j)[3];
								ssid_tmp = ipfilter_array.get(j)[4];
								ssidfilter_array = new ArrayList<String[]>();
								ssidfilter_array.add(ipfilter_array.get(j));
							} else {
								ssidfilter_array.add(ipfilter_array.get(j));

								if (j == ipfilter_array.size() - 1) {
									ApSsidTraffic.add(getTrafficSUM(ssidfilter_array));
								}
							}
						}
					}

					ip_tmp = result[i][1];
					ipfilter_array = new ArrayList<String[]>();
					ipfilter_array.add(result[i]);
				} else {
					ipfilter_array.add(result[i]);

					if (i == result.length - 1) {
						String radio_tmp = "";
						String ssid_tmp = "";

						ArrayList<String[]> ssidfilter_array = new ArrayList<String[]>();

						for (int j = 0; j < ipfilter_array.size(); j++) {
							if (!(ipfilter_array.get(j)[3].equals(radio_tmp) && ipfilter_array.get(j)[4].equals(ssid_tmp))) {
								if (ssidfilter_array.size() > 0) {
									ApSsidTraffic.add(getTrafficSUM(ssidfilter_array));
								}

								radio_tmp = ipfilter_array.get(j)[3];
								ssid_tmp = ipfilter_array.get(j)[4];
								ssidfilter_array = new ArrayList<String[]>();
								ssidfilter_array.add(ipfilter_array.get(j));
							} else {
								ssidfilter_array.add(ipfilter_array.get(j));

								if (j == ipfilter_array.size() - 1) {
									ApSsidTraffic.add(getTrafficSUM(ssidfilter_array));
								}
							}
						}
					}
				}
			}
		}

		if (result2 != null && ApSsidTraffic.size() > 0) {

			ArrayList<String[]> ssid_array = new ArrayList<String[]>();

			for (int i = 0; i < result2.length; i++) {
				//System.out.println(result2[i][0]);

				ssid_array = new ArrayList<String[]>();

				for (int j = 0; j < ApSsidTraffic.size(); j++) {
					if (ApSsidTraffic.get(j)[3].equals(result2[i][0])) {
						ssid_array.add(ApSsidTraffic.get(j));
					}
				}

				if (ssid_array.size() > 0) {
					SsidTraffic.add(getSsidTrafficSUM(ssid_array));
				}
			}
		}

		System.out.println("Get ApSsid Rx Tx Traffic, costs: " + (System.currentTimeMillis() - prevTime) / 1000 + " sec.");

		ApSsidTrafficList.add(ApSsidTraffic);
		ApSsidTrafficList.add(SsidTraffic);

		return ApSsidTrafficList;
	}

	private String[] getTrafficSUM(final ArrayList<String[]> ssidfilter_array) {
		long rx_tmp = -1L;
		long rx_sum = 0L;
		long tx_tmp = -1L;
		long tx_sum = 0L;

		for (int j = 0; j < ssidfilter_array.size(); j++) {
			//System.out.println(ssidfilter_array.get(j)[0] + ", " + ssidfilter_array.get(j)[1] + ", " + ssidfilter_array.get(j)[2] + ", " + ssidfilter_array.get(j)[3] + ", " + ssidfilter_array.get(j)[4] + ", " + ssidfilter_array.get(j)[5] + ", " + ssidfilter_array.get(j)[6]);

			if (rx_tmp == -1L) {
				//System.out.println(ssidfilter_array.get(j)[0] + ", " + ssidfilter_array.get(j)[1] + ", " + ssidfilter_array.get(j)[2] + ", " + ssidfilter_array.get(j)[3] + ", " + ssidfilter_array.get(j)[4] + ", " + ssidfilter_array.get(j)[5] + ", " + ssidfilter_array.get(j)[6]);
			} else if (Long.parseLong(ssidfilter_array.get(j)[5]) < rx_tmp) {
				rx_sum = rx_sum + Long.parseLong(ssidfilter_array.get(j)[5]);
				//System.out.println(Long.parseLong(ssidfilter_array.get(j)[5]));
			} else {
				rx_sum = rx_sum + (Long.parseLong(ssidfilter_array.get(j)[5]) - rx_tmp);
				//System.out.println(Long.parseLong(ssidfilter_array.get(j)[5]) + " - " + rx_tmp + " = " + (Long.parseLong(ssidfilter_array.get(j)[5]) - rx_tmp));
			}

			rx_tmp = Long.parseLong(ssidfilter_array.get(j)[5]);

			if (tx_tmp == -1L) {
				//System.out.println(ssidfilter_array.get(j)[0] + ", " + ssidfilter_array.get(j)[1] + ", " + ssidfilter_array.get(j)[2] + ", " + ssidfilter_array.get(j)[3] + ", " + ssidfilter_array.get(j)[4] + ", " + ssidfilter_array.get(j)[5] + ", " + ssidfilter_array.get(j)[6]);
			} else if (Long.parseLong(ssidfilter_array.get(j)[6]) < tx_tmp) {
				tx_sum = tx_sum + Long.parseLong(ssidfilter_array.get(j)[6]);
				//System.out.println(Integer.parseInt(ssidfilter_array.get(j)[6]));
			} else {
				tx_sum = tx_sum + (Long.parseLong(ssidfilter_array.get(j)[6]) - tx_tmp);
				//System.out.println(Long.parseLong(ssidfilter_array.get(j)[6]) + " - " + tx_tmp + " = " + (Long.parseLong(ssidfilter_array.get(j)[6]) - tx_tmp));
			}

			tx_tmp = Long.parseLong(ssidfilter_array.get(j)[6]);
		}

		String[] output = new String[7];
		DecimalFormat df = new DecimalFormat("#.##");
		output[0] = ssidfilter_array.get(0)[1];
		output[1] = ssidfilter_array.get(0)[2];
		output[2] = ssidfilter_array.get(0)[3];
		output[3] = ssidfilter_array.get(0)[4];
		output[4] = df.format(rx_sum / (double) 1000000);
		//System.out.println("rx_sum:" + rx_sum + ", " + rx_sum / 1000000);
		output[5] = df.format(tx_sum / (double) 1000000);
		//System.out.println("tx_sum:" + tx_sum + ", " + tx_sum / 1000000);
		output[6] = df.format((rx_sum / (double) 1000000 + tx_sum / (double) 1000000));
		//System.out.println("rx_sum + tx_sum:" + (rx_sum + tx_sum) + ", " + (rx_sum + tx_sum) / 1000000);

		return output;
	}

	private String[] getSsidTrafficSUM(final ArrayList<String[]> ssid_array) {
		double rx_sum = 0L;
		double tx_sum = 0L;

		for (int j = 0; j < ssid_array.size(); j++) {
			//System.out.println(ssid_array.get(j)[0] + ", " + ssid_array.get(j)[1] + ", " + ssid_array.get(j)[2] + ", " + ssid_array.get(j)[3] + ", " + ssid_array.get(j)[4] + ", " + ssid_array.get(j)[5] + ", " + ssid_array.get(j)[6]);

			rx_sum = rx_sum + Double.parseDouble(ssid_array.get(j)[4]);
			tx_sum = tx_sum + Double.parseDouble(ssid_array.get(j)[5]);
		}

		String[] output = new String[4];
		DecimalFormat df = new DecimalFormat("#.##");
		output[0] = ssid_array.get(0)[3];
		output[1] = df.format(rx_sum);
		//System.out.println("rx_sum:" + rx_sum + ", " + rx_sum / 1000000);
		output[2] = df.format(tx_sum);
		//System.out.println("tx_sum:" + tx_sum + ", " + tx_sum / 1000000);
		output[3] = df.format((rx_sum + tx_sum));
		//System.out.println("rx_sum + tx_sum:" + (rx_sum + tx_sum) + ", " + (rx_sum + tx_sum) / 1000000);

		return output;
	}
}
