package com.via.database;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import com.via.model.*;

public class MailQueue {
	private static String tableName;
	private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
	private static final String[] tableDefinition = {
			"ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, ",
			"ADD_TIME		TIMESTAMP NOT NULL, ",
			"MAIL_FROM		VARCHAR(200) NOT NULL, ",
			"MAIL_TO		VARCHAR(200) NOT NULL, ",
			"MAIL_CC		VARCHAR(200), ",
			"MAIL_BCC		VARCHAR(200), ",
			"SUBJECT		VARCHAR(200) NOT NULL, ",
			"TEXT			VARCHAR(500) NOT NULL, ",
			"SMTP_HOST		VARCHAR(100) NOT NULL, ",
			"SMTP_PORT		VARCHAR(10) NOT NULL, ",
			"SMTP_TIMEOUT	VARCHAR(10) NOT NULL, ",
			"USERNAME		VARCHAR(100) NOT NULL, ",
			"PASSWORD		VARCHAR(100) NOT NULL, ",
			"REASON			VARCHAR(200)"
	};
	private static int a = 0;
    private static final int iID = a++, iADD_TIME = a++, iFROM = a++, iTO = a++, iCC = a++, iBCC = a++, iSUBJECT = a++, iTEXT = a++,
    		iSMTP_HOST = a++, iSMTP_PORT = a++, iSMTP_TIMEOUT = a++, iUSERNAME = a++, iPASSWORD = a++, iREASON = a++;
    private static Thread queueThread;
    private static boolean queueFlag;
    private static long interval;
    
    static {
    	tableName = "MAILQUEUE01";
    	queueFlag = false;
    	interval = 60000;		// default 60 seconds
    	Runnable run = new Runnable() {
    		public void run() {
    			while (queueFlag) {
    				try {
						Thread.sleep(interval);
					}
					catch (InterruptedException e) {
						break;
					}

    				JDatabase dbInst = connectDatabase();
    				ArrayList<MailInfo> mailList = _getAll(dbInst);
    				Iterator<MailInfo> it = mailList.iterator();
    				while (queueFlag && it.hasNext()) {
    					MailInfo mailInfo = it.next();
    					if (_exists(dbInst, mailInfo.getId()) == false) continue;		// check whether mail has deleted by someone
    					if (Mail.send(mailInfo, false)) {
    						_remove(dbInst, mailInfo);
    						//it.remove();			// not necessary if I don't care the length
    					}
    					else {
    						_update(dbInst, mailInfo);									// update the new reason back to database when failed again
    					}
    				}
    				disconnectDatabase(dbInst);				// be sure to run this
    			}
    			System.out.println("MailQueue: queue has been stopped.");
    		}
    	};
    	queueThread = new Thread(run, "Mail Queue");
    }
	
    private static JDatabase connectDatabase() {
    	JDatabase dbInst = new JDatabase("jdbc:derby://localhost:1527/nms_db;create=true", "user", "user");
    	
    	if (dbInst.isConnected() && dbInst.isTableExisted(tableName) == false) {
    		String definition = "";
    		for (String s : tableDefinition) definition += s;
    		if (dbInst.createTable(tableName, definition)) {
    			System.out.println("MailQueue: Create table success.");
    		}
    		else {
    			System.out.println("MailQueue: Create table FAILED.");
    		}
		}
    	
    	return dbInst;
    }
    
    private static void disconnectDatabase(JDatabase dbInst) {
    	if (dbInst != null) dbInst.disconnect();
    }
    
    private static boolean isStarted() {
    	return queueThread.isAlive();
    }
    
    private static boolean startQueue() {
    	queueFlag = true;
		queueThread.start();
		
		return isStarted();
    }
    
    private static boolean stopQueue() {
    	queueFlag = false;
    	queueThread.interrupt();
		try {
			queueThread.join();
		} catch (InterruptedException e) {
		}
		
		return isStarted();
    }
    
    private static boolean _add(JDatabase dbInst, MailInfo mailInfo) {
    	String reason = mailInfo.getReason().replaceAll("'", "''");		// Single-quote can't insert into
    	String[] value = {
			"default",
			String.format("'%s'", sdf.format(mailInfo.getTime())),
			String.format("'%s'", mailInfo.getFrom()),
			String.format("'%s'", mailInfo.getTo()),
			String.format("'%s'", mailInfo.getCc()),
			String.format("'%s'", mailInfo.getBcc()),
			String.format("'%s'", mailInfo.getSubject()),
			String.format("'%s'", mailInfo.getText()),
			String.format("'%s'", mailInfo.getSmtpHost()),
			String.format("'%s'", mailInfo.getSmtpPort()),
			String.format("'%s'", mailInfo.getSmtpTimeout()),
			String.format("'%s'", mailInfo.getUsername()),
			String.format("'%s'", mailInfo.getPassword()),
			String.format("'%s'", reason)
		};
    	
    	return dbInst.insert(tableName, value);
    }
    
    private static MailInfo _setOne(String[] data) {
    	MailInfo mail = new MailInfo();
    	mail.setId(Integer.valueOf(data[iID]));			// This will be used to identify mail
		try {
			mail.setTime(sdf.parse(data[iADD_TIME]));
		}
		catch (ParseException e) {
			return null;
		}
		mail.setFrom(data[iFROM]);
		mail.setTo(data[iTO]);
		mail.setCc(data[iCC]);
		mail.setBcc(data[iBCC]);
		mail.setSubject(data[iSUBJECT]);
		mail.setText(data[iTEXT]);
		mail.setSmtpHost(data[iSMTP_HOST]);
		mail.setSmtpPort(data[iSMTP_PORT]);
		mail.setSmtpTimeout(Integer.valueOf(data[iSMTP_TIMEOUT]));
		mail.setUsername(data[iUSERNAME]);
		mail.setPassword(data[iPASSWORD]);
		mail.setReason(data[iREASON]);
		
		return mail;
    }
    
    private static MailInfo _getOldest(JDatabase dbInst) {
    	String[] values = dbInst.getFirst(tableName);
    	
		return _setOne(values);
    }
    
    private static ArrayList<MailInfo> _getAll(JDatabase dbInst) {
    	String[][] tableValues = dbInst.getAll(tableName);
    	
    	ArrayList<MailInfo> toSendMailList = new ArrayList<MailInfo>();
		if (tableValues == null) return toSendMailList;
		
		for (String[] values : tableValues) {
			MailInfo mail = _setOne(values);
			if (mail == null) {
				System.out.println("MailQueue: skip an invalid mail, " + Arrays.asList(values));
				continue;
			}
			
			toSendMailList.add(mail);
		}
		
		return toSendMailList;
    }
    
    private static int _size(JDatabase dbInst) {
    	return dbInst.getRowCount(tableName);
    }
    
    private static boolean _remove(JDatabase dbInst, MailInfo mailInfo) {
    	return dbInst.deleteRow(tableName, "ID", mailInfo.getId());
    }
    
    private static boolean _remove(JDatabase dbInst, int mailId) {
    	return dbInst.deleteRow(tableName, "ID", mailId);
    }
    
    private static boolean _update(JDatabase dbInst, MailInfo mailInfo) {
    	String reason = mailInfo.getReason().replaceAll("'", "''");
    	return dbInst.update(tableName, "REASON", reason, "ID", mailInfo.getId());
    }
    
    private static boolean _exists(JDatabase dbInst, int mailId) {
    	String idClause = String.format("ID = %s", String.valueOf(mailId));
    	return dbInst.getRowCount(tableName, new String[]{idClause}) > 0 ? true : false;
    }
    
    //==============================================================================================================
    
    public static long getInterval() {
    	return interval;
    }
    
    public static void setInterval(final long interval) {
    	MailQueue.interval = interval;
    }
    
	public static boolean start() {
		return startQueue();
	}
	
	public static void stop() {
		stopQueue();
	}
	
	public static boolean isRunning() {
		return isStarted();
	}
    
    public static boolean add(final MailInfo mailInfo) {
    	JDatabase dbInst = connectDatabase();
    	boolean result = _add(dbInst, mailInfo);
    	disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static MailInfo getOldest() {
		JDatabase dbInst = connectDatabase();
		MailInfo mail = _getOldest(dbInst);
		disconnectDatabase(dbInst);
		
		return mail;
	}
	
	public static ArrayList<MailInfo> getAll() {
		JDatabase dbInst = connectDatabase();
		ArrayList<MailInfo> toSendMailList = _getAll(dbInst);
		disconnectDatabase(dbInst);

		return toSendMailList;
	}
	
	public static int size() {
		JDatabase dbInst = connectDatabase();
		int size = _size(dbInst);
		disconnectDatabase(dbInst);
		
		return size;
	}
	
	public static boolean remove(final MailInfo mailInfo) {
		JDatabase dbInst = connectDatabase();
		boolean result = _remove(dbInst, mailInfo);
		disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static boolean remove(final int mailId) {
		JDatabase dbInst = connectDatabase();
		boolean result = _remove(dbInst, mailId);
		disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static boolean update(final MailInfo mailInfo) {
		JDatabase dbInst = connectDatabase();
		boolean result = _update(dbInst, mailInfo);
		disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static boolean exists(final int mailId) {
		JDatabase dbInst = connectDatabase();
		boolean result = _exists(dbInst, mailId);
		disconnectDatabase(dbInst);
		
		return result;
	}
}
