package com.via.database;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import com.via.model.ShortMessage;
import com.via.model.ShortMessageInfo;

public class ShortMessageQueue {
	private static String tableName;
	private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
	private static final String[] tableDefinition = {
			"ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, ",
			"ADD_TIME		TIMESTAMP NOT NULL, ",
			"PROVIDER		VARCHAR(20) NOT NULL, ",
			"ENCODE			VARCHAR(10) NOT NULL, ",
			"TIMEOUT		VARCHAR(10) NOT NULL, ",
			"USERNAME		VARCHAR(100) NOT NULL, ",
			"PASSWORD		VARCHAR(100) NOT NULL, ",
			"RECIPIENT		VARCHAR(20) NOT NULL, ",
			"TEXT			VARCHAR(500) NOT NULL, ",
			"REASON			VARCHAR(200)"
	};
	private static int a = 0;
    private static final int iID = a++, iADD_TIME = a++, iPROVIDER = a++, iENCODE = a++, iTIMEOUT = a++, iUSERNAME = a++, iPASSWORD = a++,
    		iRECIPIENT = a++, iTEXT = a++, iREASON = a++;
    private static Thread queueThread;
	private static boolean queueFlag;
	private static long interval;
    
    static {
    	tableName = "SMSQUEUE01";
    	queueFlag = false;
    	interval = 60000;		// default 60 seconds
    	Runnable run = new Runnable() {
			public void run() {
				while (queueFlag) {
					try {
						Thread.sleep(interval);
					}
					catch (InterruptedException e) {
						break;
					}

					JDatabase dbInst = connectDatabase();
					ArrayList<ShortMessageInfo> smsList = _getAll(dbInst);
					Iterator<ShortMessageInfo> it = smsList.iterator();
					while (queueFlag && it.hasNext()) {
						ShortMessageInfo smsInfo = it.next();
						if (_exists(dbInst, smsInfo.getId()) == false) continue;		// check whether SMS has deleted by someone
						if (ShortMessage.send(smsInfo, false)) {
							_remove(dbInst, smsInfo);
							//it.remove();					// not necessary if I don't care the length
						}
						else {
							_update(dbInst, smsInfo);									// update the new reason back to database when failed again
						}
					}
					disconnectDatabase(dbInst);
				}
				System.out.println("ShortMessageQueue: queue has been stopped.");
			}
		};
		queueThread = new Thread(run, "Short Message Queue");
    }
    
    private static JDatabase connectDatabase() {
    	JDatabase dbInst = new JDatabase("jdbc:derby://localhost:1527/nms_db;create=true", "user", "user");
    	
    	if (dbInst.isConnected() && dbInst.isTableExisted(tableName) == false) {
    		String definition = "";
    		for (String s : tableDefinition) definition += s;
    		if (dbInst.createTable(tableName, definition)) {
    			System.out.println("ShortMessageQueue: Create table success.");
    		}
    		else {
    			System.out.println("ShortMessageQueue: Create table FAILED.");
    		}
		}
    	
    	return dbInst;
    }
    
    private static void disconnectDatabase(JDatabase dbInst) {
    	if (dbInst != null) dbInst.disconnect();
    }
    
    private static boolean isStarted() {
    	return queueThread.isAlive();
    }
    
    private static boolean startQueue() {
    	queueFlag = true;
		queueThread.start();
		
		return isStarted();
    }
    
    private static boolean stopQueue() {
    	queueFlag = false;
    	queueThread.interrupt();
		try {
			queueThread.join();
		} catch (InterruptedException e) {
		}
		
		return isStarted();
    }
    
    private static boolean _add(JDatabase dbInst, ShortMessageInfo smsInfo) {
    	String reason = smsInfo.getReason().replaceAll("'", "''");		// Single-quote can't insert into
    	String[] value = {
			"default",
			String.format("'%s'", sdf.format(smsInfo.getTime())),
			String.format("'%s'", smsInfo.getProvider()),
			String.format("'%s'", smsInfo.getEncoding()),
			String.format("'%s'", smsInfo.getTimeout()),
			String.format("'%s'", smsInfo.getUsername()),
			String.format("'%s'", smsInfo.getPassword()),
			String.format("'%s'", smsInfo.getRecipient()),
			String.format("'%s'", smsInfo.getText()),
			String.format("'%s'", reason)
		};
    	
    	return dbInst.insert(tableName, value);
    }
    
    private static ShortMessageInfo _setOne(String[] data) {
    	ShortMessageInfo sms = new ShortMessageInfo();
		sms.setId(Integer.valueOf(data[iID]));			// This will be used to identify SMS
		try {
			sms.setTime(sdf.parse(data[iADD_TIME]));
		}
		catch (ParseException e) {
			return null;
		}
		sms.setProvider(data[iPROVIDER]);
		sms.setEncoding(data[iENCODE]);
		sms.setTimeout(Integer.valueOf(data[iTIMEOUT]));
		sms.setUsername(data[iUSERNAME]);
		sms.setPassword(data[iPASSWORD]);
		sms.setRecipient(data[iRECIPIENT]);
		sms.setText(data[iTEXT]);
		sms.setReason(data[iREASON]);
		
		return sms;
    }
    
    private static ShortMessageInfo _getOldest(JDatabase dbInst) {
    	String[] values = dbInst.getFirst(tableName);
    	
		return _setOne(values);
    }
    
    private static ArrayList<ShortMessageInfo> _getAll(JDatabase dbInst) {
    	String[][] tableValues = dbInst.getAll(tableName);
    	
    	ArrayList<ShortMessageInfo> toSendSMSList = new ArrayList<ShortMessageInfo>();
		if (tableValues == null) return toSendSMSList;
		
		for (String[] values : tableValues) {
			ShortMessageInfo sms = _setOne(values);
			if (sms == null) {
				System.out.println("ShortMessageQueue: skip an invalid sms, " + Arrays.asList(values));
				continue;
			}
			
			toSendSMSList.add(sms);
		}
		
		return toSendSMSList;
    }
    
    private static int _size(JDatabase dbInst) {
    	return dbInst.getRowCount(tableName);
    }
    
    private static boolean _remove(JDatabase dbInst, ShortMessageInfo smsInfo) {
    	return dbInst.deleteRow(tableName, "ID", smsInfo.getId());
    }
    
    private static boolean _remove(JDatabase dbInst, int smsId) {
    	return dbInst.deleteRow(tableName, "ID", smsId);
    }
    
    private static boolean _update(JDatabase dbInst, ShortMessageInfo smsInfo) {
    	String reason = smsInfo.getReason().replaceAll("'", "''");
    	return dbInst.update(tableName, "REASON", reason, "ID", smsInfo.getId());
    }
    
    private static boolean _exists(JDatabase dbInst, int smsId) {
    	String idClause = String.format("ID = %s", String.valueOf(smsId));
    	return dbInst.getRowCount(tableName, new String[]{idClause}) > 0 ? true : false;
    }
    
    //==============================================================================================================
    
    public static long getInterval() {
    	return interval;
    }
    
    public static void setInterval(final long interval) {
    	ShortMessageQueue.interval = interval;
    }
    
	public static boolean start() {
		return startQueue();
	}
	
	public static void stop() {
		stopQueue();
	}
	
	public static boolean isRunning() {
		return isStarted();
	}
	
	public static boolean add(final ShortMessageInfo smsInfo) {
    	JDatabase dbInst = connectDatabase();
    	boolean result = _add(dbInst, smsInfo);
    	disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static ShortMessageInfo getOldest() {
		JDatabase dbInst = connectDatabase();
		ShortMessageInfo sms = _getOldest(dbInst);
		disconnectDatabase(dbInst);
		
		return sms;
	}
	
	public static ArrayList<ShortMessageInfo> getAll() {
		JDatabase dbInst = connectDatabase();
		ArrayList<ShortMessageInfo> toSendSMSList = _getAll(dbInst);
		disconnectDatabase(dbInst);
		
		return toSendSMSList;
	}
	
	public static int size() {
		JDatabase dbInst = connectDatabase();
		int size = _size(dbInst);
		disconnectDatabase(dbInst);
		
		return size;
	}
	
	public static boolean remove(final ShortMessageInfo smsInfo) {
		JDatabase dbInst = connectDatabase();
		boolean result = _remove(dbInst, smsInfo);
		disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static boolean remove(final int smsId) {
		JDatabase dbInst = connectDatabase();
		boolean result = _remove(dbInst, smsId);
		disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static boolean update(final ShortMessageInfo smsInfo) {
		JDatabase dbInst = connectDatabase();
		boolean result = _update(dbInst, smsInfo);
		disconnectDatabase(dbInst);
		
		return result;
	}
	
	public static boolean exists(final int smsId) {
		JDatabase dbInst = connectDatabase();
		boolean result = _exists(dbInst, smsId);
		disconnectDatabase(dbInst);
		
		return result;
	}
}
